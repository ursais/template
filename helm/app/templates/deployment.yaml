{{ if eq .Values.distribution "kubernetes" }}
kind: Deployment
apiVersion: apps/v1
metadata:
  name: {{ .Values.name | quote }}
  annotations:
    description: Defines how to deploy the application server
spec:
  strategy:
    type: Recreate
  replicas: 1
  minReadySeconds: 120
  selector:
    matchLabels:
      name: {{ .Values.name | quote }}
      app: {{ .Values.name | quote }}
      release: {{ .Values.name | quote }}
  template:
    metadata:
      name: {{ .Values.name | quote }}
      labels:
        name: {{ .Values.name | quote }}
        app: {{ .Values.name | quote }}
        release: {{ .Values.name | quote }}
    spec:
      imagePullSecrets:
        - name: github-packages
      volumes:
        - name: {{ .Values.name }}-data
        {{- if .Values.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ .Values.persistence.existingClaim | default (include "app.fullname" .) }}
        {{- else }}
          emptyDir: {}
        {{- end }}
      containers:
      - name: {{ .Values.name | quote }}
        image: {{ .Values.image | quote }}
        env:
          - name: PGHOST
            value: {{ ternary (include "app.postgresql.fullname" .) .Values.externalDatabase.host .Values.postgresql.enabled | quote }}
          - name: PGPORT
            value: {{ ternary "5432" .Values.externalDatabase.port .Values.postgresql.enabled | quote }}
          - name: PGUSER
            value: {{ ternary .Values.postgresql.postgresqlUsername .Values.externalDatabase.user .Values.postgresql.enabled | quote }}
          - name: PGPASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ ternary (include "app.postgresql.fullname" .) (printf "%s-%s" .Release.Name "externaldb") .Values.postgresql.enabled | quote }}
                key: {{ ternary "postgresql-password" "db-password" .Values.postgresql.enabled | quote }}
          - name: PGSSLMODE
            value: {{ ternary .Values.postgresql.sslmode .Values.externalDatabase.sslmode .Values.postgresql.enabled | quote }}
          - name: DEFAULTDB
            value: {{ ternary .Values.postgresql.defaultdb .Values.externalDatabase.defaultdb .Values.postgresql.enabled | quote }}
          - name: RUNNING_ENV
            value: {{ .Values.environment }}
          - name: PLATFORM
            value: {{ .Values.platform }}
        ports:
        - name: tcp-http
          containerPort: 8080
        {{- if .Values.livenessProbe.enabled }}
        livenessProbe:
          httpGet:
            path: /
            port: tcp-http
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.livenessProbe.successThreshold }}
          failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
        {{- end }}
        {{- if .Values.readinessProbe.enabled }}
        readinessProbe:
          httpGet:
            path: /
            port: tcp-http
          initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.readinessProbe.successThreshold }}
          failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
        {{- end }}
        resources:
{{ toYaml .Values.resources | indent 10 }}
      {{- if .Values.persistence.enabled }}
        volumeMounts:
        - name: {{ .Values.name }}-data
          mountPath: /{{ .Values.name }}/data
      volumes:
      - name: {{ .Values.name }}-data
        persistentVolumeClaim:
          claimName: {{ .Values.persistence.existingClaim | default (include "app.fullname" .) }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
      {{- end }}
{{- end }}
